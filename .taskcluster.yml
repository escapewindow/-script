# This Source Code Form is subject to the terms of the Mozilla Public
# License, v. 2.0. If a copy of the MPL was not distributed with this
# file, You can obtain one at http://mozilla.org/MPL/2.0/.
version: 1
policy:
  pullRequests: public
tasks:
  $let:
    # -------------------------------------------------------------------------
    # -- This is where you add new projects -----------------------------------
    # -------------------------------------------------------------------------
    PROJECTS:
      # [ <PROJECT NAME>, <PYTHON VERSION>, <DOCKERHUB REPO>]
      - ['client',        '36',             '']
      - ['client',        '37',             '']
      - ['iscript',       '36',             '']
      - ['iscript',       '37',             '']
      - ['treescript',    '36',             '']
      - ['treescript',    '37',             ''] # mozilla/releng-treescript'] # until we figure out how to install it
    # -------------------------------------------------------------------------

    HEAD_REV:
      $if: 'tasks_for == "github-pull-request"'
      then: '${event.pull_request.head.sha}'
      else:
        $if: 'tasks_for == "github-push"'
        then: '${event.after}'
        else: '${event.release.tag_name}'

    REPO_URL:
      $if: 'tasks_for == "github-pull-request"'
      then: '${event.pull_request.head.repo.html_url}'
      else: '${event.repository.html_url}'

    OWNER: '${event.sender.login}@users.noreply.github.com'

    PUSH_DOCKER_IMAGE:
      $if: 'tasks_for == "github-pull-request"'
      then: '0'
      else:
        $if: 'tasks_for == "github-push" && event.ref in ["refs/heads/dev", "refs/heads/production"]'
        then: '1'
        else: '0'

    DOCKER_TAG:
      $if: 'tasks_for == "github-pull-request"'
      then: 'pull-request'
      else:
        $if: 'tasks_for == "github-push" && event.ref[0:11] == "refs/heads/"'
        then: '${event.ref[11:]}'
        else: 'unknown'

  in:
    $flatten:
      $map: { "$eval": "PROJECTS" }
      each(x):
        $let:
          project_name: { "$eval": "x[0]" }
          python_version: { "$eval": "x[1]" }
          dockerhub_repo: { "$eval": "x[2]" }
        in:
          $match:

            # Run code linting and unit tests for each project 
            'true':
              taskId: '${as_slugid(project_name + python_version)}'
              provisionerId: 'aws-provisioner-v1'
              workerType: 'github-worker'
              created: { $fromNow: '' }
              deadline: { $fromNow: '4 hours' }
              payload:
                maxRunTime: 3600
                image: 'python:${python_version[0]}.${python_version[1]}'
                command:
                  - sh
                  - -lxce
                  - >-
                    cd /tmp &&
                    wget ${REPO_URL}/archive/${HEAD_REV}.tar.gz &&
                    tar zxf ${HEAD_REV}.tar.gz &&
                    mv scriptworker-scripts-${HEAD_REV} /src &&
                    cd /src &&
                    pip install tox &&
                    tox -e ${project_name}-py${python_version}
              metadata:
                name: '${project_name}-py${python_version}: Run tox [on ${DOCKER_TAG}]'
                description: 'Code linting and unit tests for ${project_name} on python ${python_version[0]}.${python_version[1]}'
                owner: '${OWNER}'
                source: '${REPO_URL}/raw/${HEAD_REV}/.taskcluster.yml'

            # Build docker image and (optionally) push to docker hub
            'dockerhub_repo != ""':
              taskId: '${as_slugid(project_name + "docker_build_and_push")}'
              dependencies:
                - '${as_slugid(project_name + python_version)}'
              provisionerId: 'aws-provisioner-v1'
              workerType: 'github-worker'
              created: { $fromNow: '' }
              deadline: { $fromNow: '24 hours' }
              payload:
                features:
                  dind: true
                  taskclusterProxy: true
                maxRunTime: 3600
                # we need to run really old docker version because taskcluster is using
                # really old version in their setup
                # image: docker:stable
                image: 'docker:1.6.2'
                env:

                  DOCKERHUB_EMAIL: 'release+dockerhub+services@mozilla.com'
                  DOCKERHUB_USER: 'mozillarelengservices'
                  DOCKER_REPO: '${dockerhub_repo}'
                  DOCKER_TAG: '${DOCKER_TAG}'
                  GIT_HEAD_REV: '${HEAD_REV}'
                  PROJECT_NAME: '${project_name}'
                  PUSH_DOCKER_IMAGE: '${PUSH_DOCKER_IMAGE}'
                  REPO_URL: '${REPO_URL}'
                  SECRET_URL: 'http://taskcluster/secrets/v1/secret/project/releng/scriptworker-scripts/deploy'
                command:
                  - sh
                  - -lxce
                  - >-
                    cd /tmp &&
                    wget ${REPO_URL}/archive/${HEAD_REV}.tar.gz &&
                    tar zxf ${HEAD_REV}.tar.gz &&
                    mv scriptworker-scripts-${HEAD_REV} /src &&
                    cd /src/${project_name} &&
                    cp ../docker.d/* docker.d/ &&
                    ./docker.d/generate_version_json.sh &&
                    ./docker.d/build_image.sh /tmp/image.tar &&
                    if [ "$PUSH_DOCKER_IMAGE" == "1" ]; then
                      ./docker.d/push_image.sh
                    fi
                artifacts:
                  public/image.tar:
                    expires: {$fromNow: '8 weeks'}
                    path: '/tmp/image.tar'
                    type: 'file'
              scopes:
                $if: 'PUSH_DOCKER_IMAGE == "0"'
                then: []
                else:
                  - 'secrets:get:project/releng/scriptworker-scripts/deploy'
              metadata:
                $let:
                  description:
                    $if: 'PUSH_DOCKER_IMAGE == "0"'
                    then: '${project_name}-py${python_version}: build docker image [on ${DOCKER_TAG}]'
                    else: '${project_name}-py${python_version}: build and push docker image [on ${DOCKER_TAG}]'
                in:
                  name: '${description}'
                  description: '${description}'
                  owner: '${OWNER}'
                  source: '${REPO_URL}/raw/${HEAD_REV}/.taskcluster.yml'
