# This Source Code Form is subject to the terms of the Mozilla Public
# License, v. 2.0. If a copy of the MPL was not distributed with this
# file, You can obtain one at http://mozilla.org/MPL/2.0/.
version: 1
policy:
  pullRequests: public
tasks:
  $let:
    # -------------------------------------------------------------------------
    # -- This is where you add new projects -----------------------------------
    # -------------------------------------------------------------------------
    PROJECTS:
      # [ <PROJECT NAME>, <PROJECT PATH>,         <PYTHON VERSION>, <BUILD DOCKER IMAGE>]
      - ['client',        '/scriptworker_client', '36',             false]
      - ['client',        '/scriptworker_client', '37',             true]
      - ['iscript',       '/iscript',             '36',             false]
      - ['iscript',       '/iscript',             '37',             true]
      - ['treescript',    '/treescript',          '36',             false]
      - ['treescript',    '/treescript',          '37',             true]
    # -------------------------------------------------------------------------

    HEAD_REV:
      $if: 'tasks_for == "github-pull-request"'
      then: '${event.pull_request.head.sha}'
      else:
        $if: 'tasks_for == "github-push"'
        then: '${event.after}'
        else: '${event.release.tag_name}'

    REPO_URL:
      $if: 'tasks_for == "github-pull-request"'
      then: '${event.pull_request.head.repo.html_url}'
      else: '${event.repository.html_url}'

    OWNER: '${event.sender.login}@users.noreply.github.com'

    PUSH_DOCKER_IMAGE:
      $if: 'tasks_for == "github-pull-request"'
      then: '0'
      else:
        $if: 'tasks_for == "github-push" && event.ref in ["refs/heads/dev", "refs/heads/production"]'
        then: '1'
        else: '0'

    DOCKER_TAG:
      $if: 'tasks_for == "github-pull-request"'
      then: 'pull-request'
      else:
        $if: 'tasks_for == "github-push" && event.ref[0:11] == "refs/heads/"'
        then: '${event.ref[11:]}'
        else: 'unknown'

  in:
    $flatten:
      $map: { "$eval": "PROJECTS" }
      each(x):
        $let:
          project_name: { "$eval": "x[0]" }
          project_path: { "$eval": "x[1]" }
          python_version: { "$eval": "x[2]" }
          build_docker_image: { "$eval": "x[1]" }
        in:
          $match:

            # Run code linting and unit tests for each project 
            'true':
              taskId: '${as_slugid(project_name + python_version)}'
              provisionerId: 'aws-provisioner-v1'
              workerType: 'github-worker'
              created: {$fromNow: ''}
              deadline: {$fromNow: '4 hours'}
              payload:
                maxRunTime: 3600
                image: 'python:${python_version[0]}.${python_version[1]}'
                command:
                  - sh
                  - -lxce
                  - >-
                    cd /tmp &&
                    wget ${REPO_URL}/archive/${HEAD_REV}.tar.gz &&
                    tar zxf ${HEAD_REV}.tar.gz &&
                    mv scriptworker-scripts-${HEAD_REV} /src &&
                    cd /src &&
                    pip install tox &&
                    tox -e ${project_name}-py${python_version}
              metadata:
                name: 'tox -e ${project_name}-py${python_version} (on ${DOCKER_TAG})'
                description: 'Code linting and unit tests for ${project_name} on python ${python_version[0]}.${python_version[1]}'
                owner: '${OWNER}'
                source: '${REPO_URL}/raw/${HEAD_REV}/.taskcluster.yml'
