version: 1
policy:
  pullRequests: public
tasks:
  $let:
    secrets: 'project/releng/shipitscript/deploy'
    github_repo: 'mozilla-releng/shipitscript'
    docker_repo: 'mozilla/shipitscript'
    deployed_python_version: 'py37'

    head_rev:
      $if: 'tasks_for == "github-pull-request"'
      then: ${event.pull_request.head.sha}
      else:
        $if: 'tasks_for == "github-push"'
        then: ${event.after}
        else: ${event.release.tag_name}

    repository:
      $if: 'tasks_for == "github-pull-request"'
      then: ${event.pull_request.head.repo.html_url}
      else: ${event.repository.html_url}

    owner: ${event.sender.login}@users.noreply.github.com

    push_docker_image:
      $if: 'tasks_for == "github-pull-request"'
      then: ''
      else:
        $if: 'event.repository.html_url != "https://github.com/${github_repo}"'
        then: ''
        else:
          # push to production
          $if: 'tasks_for == "github-release"'
          then: '&& ./docker.d/push_image.sh'
          else:
            $if: 'event.ref in ["refs/heads/master", "refs/heads/dev", "refs/heads/stage"]'
            then: '&& ./docker.d/push_image.sh'
            else: ''

    docker_release_tag:
      $if: 'tasks_for == "github-release"'
      then: '${event.release.tag_name}'
      else: ''

    docker_tag:
      $if: 'tasks_for == "github-pull-request"'
      then: 'pull-request'
      else:
        $if: 'tasks_for == "github-release"'
        then: 'prod'
        else:
          $if: 'event.ref == "refs/heads/master"'
          then: 'latest'
          else:
            $if: 'event.ref == "refs/heads/stage"'
            then: 'stage'
            else:
              $if: 'event.ref == "refs/heads/dev"'
              then: 'dev'
              else: 'garbage'

  in:
    - taskId: '${as_slugid(deployed_python_version)}'
      provisionerId: aws-provisioner-v1
      workerType: github-worker
      created: {$fromNow: ''}
      deadline: {$fromNow: '4 hours'}
      payload:
        maxRunTime: 3600
        image: python:${deployed_python_version[2]}.${deployed_python_version[3]}
        command:
          - sh
          - -lxce
          - >-
            git clone ${repository} /src &&
            cd /src &&
            git config advice.detachedHead false &&
            git checkout ${head_rev} &&
            pip install tox &&
            tox -e ${deployed_python_version}
      metadata:
        name: tox ${deployed_python_version} (${docker_tag})
        description: code linting & unit tests on ${deployed_python_version} (${docker_tag})
        owner: ${owner}
        source: ${repository}/raw/${head_rev}/.taskcluster.yml

    - taskId: '${as_slugid("docker_build_and_push")}'
      dependencies:
        - '${as_slugid(deployed_python_version)}'
      provisionerId: aws-provisioner-v1
      workerType: github-worker
      created: {$fromNow: ''}
      deadline: {$fromNow: '24 hours'}
      payload:
        features:
          dind: true
          taskclusterProxy: true
        maxRunTime: 3600
        image: docker:stable
        env:
          SECRET_URL: http://taskcluster/secrets/v1/secret/${secrets}
          DOCKERHUB_EMAIL: release+dockerhub+services@mozilla.com
          DOCKERHUB_USER: mozillarelengservices
          DOCKER_TAG: ${docker_tag}
          DOCKER_REPO: ${docker_repo}
          DOCKER_RELEASE_TAG: ${docker_release_tag}
          DOCKER_API_VERSION: "1.18"
          GIT_HEAD_REV: ${head_rev}
        command:
          - sh
          - -ce
          - >-
            mkdir /src && cd /src &&
            wget -O- ${repository}/archive/${head_rev}.tar.gz | tar -xz --strip-components=1 &&
            docker.d/generate_version_json.sh &&
            cat version.json &&
            docker build -f Dockerfile -t $DOCKER_REPO:$DOCKER_TAG . &&
            docker save $DOCKER_REPO:$DOCKER_TAG > /tmp/image.tar
            ${push_docker_image}
        artifacts:
          public/image.tar:
            expires: {$fromNow: '8 weeks'}
            path: /tmp/image.tar
            type: file
      scopes:
        $if: 'push_docker_image == ""'
        then: []
        else:
          - secrets:get:${secrets}
      metadata:
        $let:
          description:
            $if: 'push_docker_image == ""'
            then: 'build docker image (${docker_tag})'
            else: 'build and push docker image (${docker_tag})'
        in:
          name: ${description}
          description: ${description}
          owner: ${owner}
          source: ${repository}/raw/${head_rev}/.taskcluster.yml
